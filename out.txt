 INFO parsing: started parsing ./examples/infinite_loop.bf
DEBUG pass{pass="dead-code-elimination"}: running dead-code-elimination (pass #1.0)
DEBUG pass{pass="dead-code-elimination"}: removed dead node NodeId(21) visited=false incoming=0 outgoing=0 node=Int(Int { node: NodeId(21), value: OutputPort(3) }, 1)
DEBUG pass{pass="dead-code-elimination"}: removed dead node NodeId(22) visited=false incoming=0 outgoing=0 node=Int(Int { node: NodeId(22), value: OutputPort(4) }, -1)
DEBUG pass{pass="dead-code-elimination"}: removed dead node NodeId(20) visited=false incoming=0 outgoing=0 node=Int(Int { node: NodeId(20), value: OutputPort(2) }, 0)
DEBUG pass{pass="dead-code-elimination"}: removed dead node NodeId(4) visited=false incoming=0 outgoing=0 node=Int(Int { node: NodeId(4), value: OutputPort(4) }, -1)
DEBUG pass{pass="dead-code-elimination"}: finished running dead-code-elimination (pass #1.0, changed)
DEBUG pass{pass="unobserved-store"}: running unobserved-store (pass #1.1)
DEBUG pass{pass="unobserved-store"}: finished running unobserved-store (pass #1.1, didn't change)
DEBUG pass{pass="constant-folding"}: running constant-folding (pass #1.2)
DEBUG pass{pass="constant-folding"}: finished running constant-folding (pass #1.2, didn't change)
DEBUG pass{pass="associative-add"}: running associative-add (pass #1.3)
DEBUG pass{pass="associative-add"}: found add (NodeId(6): InputPort(9) + 1)
DEBUG pass{pass="associative-add"}: finished running associative-add (pass #1.3, didn't change)
DEBUG pass{pass="constant-loads"}: running constant-loads (pass #1.4)
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
DEBUG pass{pass="constant-loads"}: replacing load at 0 with value 0x00: Load { node: NodeId(5), ptr: InputPort(5), effect_in: InputPort(6), value: OutputPort(7), effect_out: OutputPort(8) }
DEBUG pass{pass="constant-loads"}: created int node NodeId(33) with value 0
DEBUG pass{pass="constant-loads"}: rewiring effect edge bridging from InputPort(6)-OutputPort(8) into OutputPort(0)->InputPort(14) (NodeId(0) to NodeId(7))
TRACE pass{pass="constant-loads"}: splicing InputPort(6)->OutputPort(8) into OutputPort(0)->InputPort(14) (kind: Effect, parent: Load(Load { node: NodeId(5), ptr: InputPort(5), effect_in: InputPort(6), value: OutputPort(7), effect_out: OutputPort(8) }))
TRACE pass{pass="constant-loads"}: removing old ports InputPort(6), OutputPort(8)
TRACE pass{pass="constant-loads"}: rewiring OutputPort(7)->InputPort(9) into OutputPort(4)->InputPort(9)
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
DEBUG pass{pass="constant-loads"}: replacing load at 0 with value 0x00: Load { node: NodeId(24), ptr: InputPort(6), effect_in: InputPort(7), value: OutputPort(8), effect_out: OutputPort(9) }
DEBUG pass{pass="constant-loads"}: created int node NodeId(30) with value 0
DEBUG pass{pass="constant-loads"}: rewiring effect edge bridging from InputPort(7)-OutputPort(9) into OutputPort(1)->InputPort(15) (NodeId(19) to NodeId(27))
TRACE pass{pass="constant-loads"}: splicing InputPort(7)->OutputPort(9) into OutputPort(1)->InputPort(15) (kind: Effect, parent: Load(Load { node: NodeId(24), ptr: InputPort(6), effect_in: InputPort(7), value: OutputPort(8), effect_out: OutputPort(9) }))
TRACE pass{pass="constant-loads"}: removing old ports InputPort(7), OutputPort(9)
TRACE pass{pass="constant-loads"}: rewiring OutputPort(8)->InputPort(10) into OutputPort(2)->InputPort(10)
DEBUG pass{pass="constant-loads"}: theta body does no stores, not invalidating program tape
DEBUG pass{pass="constant-loads"}: phi node does no stores, not invalidating program tape
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
DEBUG pass{pass="constant-loads"}: replacing load at 0 with value 0x00: Load { node: NodeId(8), ptr: InputPort(16), effect_in: InputPort(17), value: OutputPort(18), effect_out: OutputPort(19) }
DEBUG pass{pass="constant-loads"}: created int node NodeId(34) with value 0
DEBUG pass{pass="constant-loads"}: rewiring effect edge bridging from InputPort(17)-OutputPort(19) into OutputPort(15)->InputPort(23) (NodeId(7) to NodeId(10))
TRACE pass{pass="constant-loads"}: splicing InputPort(17)->OutputPort(19) into OutputPort(15)->InputPort(23) (kind: Effect, parent: Load(Load { node: NodeId(8), ptr: InputPort(16), effect_in: InputPort(17), value: OutputPort(18), effect_out: OutputPort(19) }))
TRACE pass{pass="constant-loads"}: removing old ports InputPort(17), OutputPort(19)
TRACE pass{pass="constant-loads"}: rewiring OutputPort(18)->InputPort(20) into OutputPort(7)->InputPort(20)
DEBUG pass{pass="constant-loads"}: finished running constant-loads (pass #1.4, changed)
DEBUG pass{pass="constant-folding"}: running constant-folding (pass #1.5)
DEBUG pass{pass="constant-folding"}: replaced const eq with true (0 == 0) Eq { node: NodeId(25), lhs: InputPort(10), rhs: InputPort(11), value: OutputPort(12) } ((Int(Int { node: NodeId(30), value: OutputPort(2) }, 0), OutputPort(2), Value) == (Int(Int { node: NodeId(23), value: OutputPort(5) }, 0), OutputPort(5), Value))
TRACE pass{pass="constant-folding"}: rewiring OutputPort(12)->InputPort(13) into OutputPort(8)->InputPort(13)
DEBUG pass{pass="constant-folding"}: replaced const eq with true (0 == 0) Eq { node: NodeId(9), lhs: InputPort(20), rhs: InputPort(21), value: OutputPort(22) } ((Int(Int { node: NodeId(34), value: OutputPort(7) }, 0), OutputPort(7), Value) == (Int(Int { node: NodeId(2), value: OutputPort(2) }, 0), OutputPort(2), Value))
TRACE pass{pass="constant-folding"}: rewiring OutputPort(22)->InputPort(24) into OutputPort(18)->InputPort(24)
DEBUG pass{pass="constant-folding"}: evaluated add Add { node: NodeId(6), lhs: InputPort(9), rhs: InputPort(10), value: OutputPort(11) } to 1
TRACE pass{pass="constant-folding"}: rewiring OutputPort(11)->InputPort(13) into OutputPort(22)->InputPort(13)
DEBUG pass{pass="constant-folding"}: finished running constant-folding (pass #1.5, changed)
DEBUG pass{pass="constant-deduplication"}: running constant-deduplication (pass #1.6)
DEBUG pass{pass="constant-deduplication"}: finished running constant-deduplication (pass #1.6, didn't change)
DEBUG pass{pass="dead-code-elimination"}: running dead-code-elimination (pass #2.0)
DEBUG pass{pass="dead-code-elimination"}: removed dead node NodeId(23) visited=false incoming=0 outgoing=0 node=Int(Int { node: NodeId(23), value: OutputPort(5) }, 0)
DEBUG pass{pass="dead-code-elimination"}: removed dead node NodeId(30) visited=false incoming=0 outgoing=0 node=Int(Int { node: NodeId(30), value: OutputPort(2) }, 0)
DEBUG pass{pass="dead-code-elimination"}: removed dead node NodeId(3) visited=false incoming=0 outgoing=0 node=Int(Int { node: NodeId(3), value: OutputPort(3) }, 1)
DEBUG pass{pass="dead-code-elimination"}: removed dead node NodeId(33) visited=false incoming=0 outgoing=0 node=Int(Int { node: NodeId(33), value: OutputPort(4) }, 0)
DEBUG pass{pass="dead-code-elimination"}: removed dead node NodeId(2) visited=false incoming=0 outgoing=0 node=Int(Int { node: NodeId(2), value: OutputPort(2) }, 0)
DEBUG pass{pass="dead-code-elimination"}: removed dead node NodeId(34) visited=false incoming=0 outgoing=0 node=Int(Int { node: NodeId(34), value: OutputPort(7) }, 0)
DEBUG pass{pass="dead-code-elimination"}: finished running dead-code-elimination (pass #2.0, changed)
DEBUG pass{pass="unobserved-store"}: running unobserved-store (pass #2.1)
DEBUG pass{pass="unobserved-store"}: finished running unobserved-store (pass #2.1, didn't change)
DEBUG pass{pass="constant-folding"}: running constant-folding (pass #2.2)
DEBUG pass{pass="constant-folding"}: constant folding 'not true' to 'false'
TRACE pass{pass="constant-folding"}: rewiring OutputPort(14)->InputPort(16) into OutputPort(2)->InputPort(16)
DEBUG pass{pass="constant-folding"}: finished running constant-folding (pass #2.2, didn't change)
DEBUG pass{pass="associative-add"}: running associative-add (pass #2.3)
DEBUG pass{pass="associative-add"}: finished running associative-add (pass #2.3, didn't change)
DEBUG pass{pass="constant-loads"}: running constant-loads (pass #2.4)
DEBUG pass{pass="constant-loads"}: theta body does no stores, not invalidating program tape
DEBUG pass{pass="constant-loads"}: phi node does no stores, not invalidating program tape
DEBUG pass{pass="constant-loads"}: redirected Store { node: NodeId(7), ptr: InputPort(12), value: InputPort(13), effect_in: InputPort(14), effect_out: OutputPort(15) } to a constant of 1
DEBUG pass{pass="constant-loads"}: finished running constant-loads (pass #2.4, didn't change)
DEBUG pass{pass="constant-folding"}: running constant-folding (pass #2.5)
DEBUG pass{pass="constant-folding"}: finished running constant-folding (pass #2.5, didn't change)
DEBUG pass{pass="constant-deduplication"}: running constant-deduplication (pass #2.6)
DEBUG pass{pass="constant-deduplication"}: finished running constant-deduplication (pass #2.6, didn't change)
DEBUG pass{pass="dead-code-elimination"}: running dead-code-elimination (pass #3.0)
DEBUG pass{pass="dead-code-elimination"}: removed dead node NodeId(31) visited=false incoming=0 outgoing=0 node=Bool(Bool { node: NodeId(31), value: OutputPort(8) }, true)
DEBUG pass{pass="dead-code-elimination"}: finished running dead-code-elimination (pass #3.0, changed)
DEBUG pass{pass="unobserved-store"}: running unobserved-store (pass #3.1)
DEBUG pass{pass="unobserved-store"}: finished running unobserved-store (pass #3.1, didn't change)
DEBUG pass{pass="constant-folding"}: running constant-folding (pass #3.2)
DEBUG pass{pass="constant-folding"}: finished running constant-folding (pass #3.2, didn't change)
DEBUG pass{pass="associative-add"}: running associative-add (pass #3.3)
DEBUG pass{pass="associative-add"}: finished running associative-add (pass #3.3, didn't change)
DEBUG pass{pass="constant-loads"}: running constant-loads (pass #3.4)
DEBUG pass{pass="constant-loads"}: theta body does no stores, not invalidating program tape
DEBUG pass{pass="constant-loads"}: phi node does no stores, not invalidating program tape
DEBUG pass{pass="constant-loads"}: redirected Store { node: NodeId(7), ptr: InputPort(12), value: InputPort(13), effect_in: InputPort(14), effect_out: OutputPort(15) } to a constant of 1
DEBUG pass{pass="constant-loads"}: finished running constant-loads (pass #3.4, didn't change)
DEBUG pass{pass="constant-folding"}: running constant-folding (pass #3.5)
DEBUG pass{pass="constant-folding"}: finished running constant-folding (pass #3.5, didn't change)
DEBUG pass{pass="constant-deduplication"}: running constant-deduplication (pass #3.6)
DEBUG pass{pass="constant-deduplication"}: finished running constant-deduplication (pass #3.6, didn't change)
DEBUG pass{pass="dead-code-elimination"}: running dead-code-elimination (pass #4.0)
DEBUG pass{pass="dead-code-elimination"}: finished running dead-code-elimination (pass #4.0, didn't change)
DEBUG pass{pass="unobserved-store"}: running unobserved-store (pass #4.1)
DEBUG pass{pass="unobserved-store"}: finished running unobserved-store (pass #4.1, didn't change)
DEBUG pass{pass="constant-folding"}: running constant-folding (pass #4.2)
DEBUG pass{pass="constant-folding"}: finished running constant-folding (pass #4.2, didn't change)
DEBUG pass{pass="associative-add"}: running associative-add (pass #4.3)
DEBUG pass{pass="associative-add"}: finished running associative-add (pass #4.3, didn't change)
DEBUG pass{pass="constant-loads"}: running constant-loads (pass #4.4)
DEBUG pass{pass="constant-loads"}: theta body does no stores, not invalidating program tape
DEBUG pass{pass="constant-loads"}: phi node does no stores, not invalidating program tape
DEBUG pass{pass="constant-loads"}: redirected Store { node: NodeId(7), ptr: InputPort(12), value: InputPort(13), effect_in: InputPort(14), effect_out: OutputPort(15) } to a constant of 1
DEBUG pass{pass="constant-loads"}: finished running constant-loads (pass #4.4, didn't change)
DEBUG pass{pass="constant-folding"}: running constant-folding (pass #4.5)
DEBUG pass{pass="constant-folding"}: finished running constant-folding (pass #4.5, didn't change)
DEBUG pass{pass="constant-deduplication"}: running constant-deduplication (pass #4.6)
DEBUG pass{pass="constant-deduplication"}: finished running constant-deduplication (pass #4.6, didn't change)
Optimized Program (took 5 iterations):
_36 := int 1
_1 := int 0
store _1, _36 // pred: 0
_35 := bool true
// pred: 7
if _35 {
  
} else {
  // pred: 16
  do {
    _32 := bool false
  } while { _32 }
}
